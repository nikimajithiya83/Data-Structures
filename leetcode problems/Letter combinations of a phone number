class Solution {
public:
    vector<string> letterCombinations(string digits) {
        if (digits.empty()) {
            return {};
        }

        static const unordered_map<char, string> phone = {
            {'2', "abc"},
            {'3', "def"},
            {'4', "ghi"},
            {'5', "jkl"},
            {'6', "mno"},
            {'7', "pqrs"},
            {'8', "tuv"},
            {'9', "wxyz"}
        };

        vector<string> output;
        backtrack(output, "", digits, phone);
        return output;
    }

private:
    void backtrack(vector<string>& output, string combination, string next_digits, const unordered_map<char, string>& phone) {
        if (next_digits.empty()) {
            output.push_back(combination);
        } else {
            string letters = phone.at(next_digits[0]);
            for (char letter : letters) {
                backtrack(output, combination + letter, next_digits.substr(1), phone);
            }
        }
    }
};
