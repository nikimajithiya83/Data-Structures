class Solution {
public:
    vector<vector<int>> subsets(vector<int>& nums) {
         vector<vector<int>> ans; // To store all subsets
        vector<int> path; // Current subset
        dfs(nums, 0, path, ans); // Start DFS
        return ans; // Return all subsets
    }

private:
    void dfs(const vector<int>& nums, int start, vector<int>& path, vector<vector<int>>& ans) {
        ans.push_back(path); // Add current subset to the result
        
        for (int i = start; i < nums.size(); ++i) {
            path.push_back(nums[i]); // Include current element
            dfs(nums, i + 1, path, ans); // Recur with the next index
            path.pop_back(); // Backtrack to explore other subsets
        }
        
    }
};
